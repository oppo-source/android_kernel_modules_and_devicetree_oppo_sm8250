/*
 * Copyright (C) 2013-2017, Shenzhen Huiding Technology Co., Ltd.
 * All Rights Reserved.
 * Version:
 * Description:
 * History:
 */

#ifndef _GF_ERROR_H_
#define _GF_ERROR_H_

#include <assert.h>
#include <stdint.h>
#include <stddef.h>

#ifdef __cplusplus
extern "C" {
#endif  // #ifdef __cplusplus

#define GF_ERROR_BREAK(err)  { if (GF_SUCCESS != (err)) { break; } }
#define GF_NULL_BREAK(ptr, err) { if ((ptr) == NULL) { (err) = GF_ERROR_BAD_PARAMS; break; }}
#define GF_ASSERT_NOT_NULL(ptr) { assert((ptr) != nullptr); }
#define GF_ERROR_WITHOUT_OFFSET(err, offset) ((err) >= (offset) ? ((err) - (offset)) : (err))
#define GF_ERROR_SIZE_BREAK(type, size, err) { if ((size) < sizeof(type)) { (err) = GF_ERROR_INVALID_DATA; break;}}
#define GF_CHECK_MALLOC_NULL_PTR(ptr) \
    if (NULL == ptr) { \
        GF_LOGE(LOG_TAG"[%s] Out of memory.", __func__); \
        err = GF_ERROR_OUT_OF_MEMORY; \
        break; \
    }

#define GF_CHECK_MEMORY_COPY_RESULT(ret) \
    if (0 != ret) { \
        err = GF_ERROR_MEMORY_COPY_FAILED; \
        break; \
    }

#define GF_CHECK_ADDRESS_VALID(start, end, start_offset, offset)   \
    if (((start_offset) + (offset)) > (start + end)) { \
        GF_LOGE(LOG_TAG"[%s] Space is not enough, some error happened!", __func__); \
        err = GF_ERROR_INVALID_DATA; \
        break; \
    }


#ifndef UNUSED_VAR
#define UNUSED_VAR(X)   (void)(X)
#endif    // UNUSED_VAR

typedef enum gf_error {
    GF_SUCCESS = 0,

    // ta error
    GF_ERROR_BASE = 1000,
    GF_ERROR_OUT_OF_MEMORY,  // = GF_ERROR_BASE + 1,
    GF_ERROR_OPEN_TA_FAILED,  // = GF_ERROR_BASE + 2,
    GF_ERROR_MODULE_NOT_INITED,  //  = GF_ERROR_BASE + 3,
    GF_ERROR_BAD_PARAMS,  // = GF_ERROR_BASE + 4,
    GF_ERROR_NO_SPACE,  // = GF_ERROR_BASE + 5,
    GF_ERROR_MEMORY_COPY_FAILED,  //  = GF_ERROR_BASE + 6,
    GF_ERROR_REACH_FINGERS_UPLIMIT,  // = GF_ERROR_BASE + 7,
    GF_ERROR_NOT_MATCH,  // = GF_ERROR_BASE + 8,
    GF_ERROR_CANCELED,  // = GF_ERROR_BASE + 9,
    GF_ERROR_TIMEOUT,  // = GF_ERROR_BASE + 10,
    GF_ERROR_PREPROCESS_FAILED,  // = GF_ERROR_BASE + 11,
    GF_ERROR_GENERIC,  // = GF_ERROR_BASE + 12,
    GF_ERROR_ACQUIRED_PARTIAL,  // = GF_ERROR_BASE + 13,
    GF_ERROR_ACQUIRED_IMAGER_DIRTY,  // = GF_ERROR_BASE + 14,
    GF_ERROR_DUPLICATE_FINGER,  // = GF_ERROR_BASE + 15,
    GF_ERROR_OPEN_DEVICE_FAILED,  // = GF_ERROR_BASE + 16,
    GF_ERROR_HAL_GENERAL_ERROR,  // = GF_ERROR_BASE + 17,
    GF_ERROR_HAL_FILE_DESCRIPTION_NULL,  // = GF_ERROR_BASE + 18,
    GF_ERROR_HAL_IOCTL_FAILED,  // = GF_ERROR_BASE + 19,
    GF_ERROR_HAL_TIMER_FUNC,  // = GF_ERROR_BASE + 20,
    GF_ERROR_CORRUPT_CONTENT,  // = GF_ERROR_BASE + 21,
    GF_ERROR_INCORRECT_VERSION,  // = GF_ERROR_BASE + 22,
    GF_ERROR_CORRUPT_OBJECT,  // = GF_ERROR_BASE + 23,
    GF_ERROR_INVALID_DATA,  // = GF_ERROR_BASE + 24,
    GF_ERROR_SPI_TRANSFER_ERROR,  // = GF_ERROR_BASE + 25,
    GF_ERROR_SPI_GENERAL_ERROR,  // = GF_ERROR_BASE + 26,
    GF_ERROR_SPI_IRQ_HANDLE,  // = GF_ERROR_BASE + 27,
    GF_ERROR_SPI_RAW_DATA_CRC_FAILED,  // = GF_ERROR_BASE + 28,
    GF_ERROR_SPI_RAW_DATA_BUF_BUSY,  // = GF_ERROR_BASE + 29,
    GF_ERROR_SPI_FW_CFG_DATA_ERROR,  // = GF_ERROR_BASE + 30,
    GF_ERROR_SPI_FW_DOWNLOAD_FAILED,  // = GF_ERROR_BASE + 31,
    GF_ERROR_SPI_CFG_DOWNLOAD_FAILED,  // = GF_ERROR_BASE + 32,
    GF_ERROR_SAVE_FP_TEMPLATE,  // = GF_ERROR_BASE + 33,
    GF_ERROR_FP_BUSY,  // = GF_ERROR_BASE + 34,
    GF_ERROR_OPEN_SECURE_OBJECT_FAILED,  // = GF_ERROR_BASE + 35,
    GF_ERROR_READ_SECURE_OBJECT_FAILED,  // = GF_ERROR_BASE + 36,
    GF_ERROR_WRITE_SECURE_OBJECT_FAILED,  // = GF_ERROR_BASE + 37,
    GF_ERROR_DELETE_SECURE_OBJECT_FAILED,  // = GF_ERROR_BASE + 38,
    GF_ERROR_SECURE_OBJECT_NOT_EXIST,  // = GF_ERROR_BASE + 39,
    GF_ERROR_WRITE_CONFIG_FAILED,  // = GF_ERROR_BASE + 40,
    GF_ERROR_TEST_SENSOR_FAILED,  // = GF_ERROR_BASE + 41,
    GF_ERROR_SET_MODE_FAILED,  // = GF_ERROR_BASE + 42,
    GF_ERROR_CHIP_ID_NOT_CORRECT,  // = GF_ERROR_BASE + 43,
    GF_ERROR_MAX_NUM,  // = GF_ERROR_BASE + 44,
    GF_ERROR_TEST_BAD_POINT_FAILED,  // = GF_ERROR_BASE + 45,
    GF_ERROR_TEST_FRR_FAR_ENROLL_DIFFERENT_FINGER,  // = GF_ERROR_BASE + 46,
    GF_ERROR_DUPLICATE_AREA,  // = GF_ERROR_BASE + 47,
    GF_ERROR_SPI_COMMUNICATION,  // = GF_ERROR_BASE + 48,
    GF_ERROR_FINGER_NOT_EXIST,  // = GF_ERROR_BASE + 49,
    // This means the saved preprocess version is
    GF_ERROR_INVALID_PREPROCESS_VERSION,  // = GF_ERROR_BASE + 50,

    // different from the new preprocess version.
    // Should delete the saved calibration parameters.
    GF_ERROR_TA_DEAD,  // = GF_ERROR_BASE + 51,
    GF_ERROR_NAV_TOO_FAST,  // = GF_ERROR_BASE + 52,
    GF_ERROR_UNSUPPORT_CHIP,  // = GF_ERROR_BASE + 53,
    // Means that finger press event is caused by temperature, should update all base
    GF_ERROR_INVALID_FINGER_PRESS,  // = GF_ERROR_BASE + 54,
    GF_ERROR_TA_GENERATE_RANDOM,  // = GF_ERROR_BASE + 55,
    GF_ERROR_BIO_ASSAY_FAIL,  // = GF_ERROR_BASE + 56,
    GF_ERROR_INVALID_HAT_VERSION,  // = GF_ERROR_BASE + 57,
    GF_ERROR_INVALID_CHALLENGE,  // = GF_ERROR_BASE + 58,
    GF_ERROR_UNTRUSTED_ENROLL,  // = GF_ERROR_BASE + 59,
    GF_ERROR_INVALID_BASE,  // = GF_ERROR_BASE + 60,

    GF_ERROR_SENSOR_BROKEN_CHECK_NEXT_FRAME,  // = GF_ERROR_BASE + 61,
    GF_ERROR_SENSOR_BROKEN_CHECK_ALGO_ERROR,  // = GF_ERROR_BASE + 62,
    GF_ERROR_SENSOR_IS_BROKEN,  // = GF_ERROR_BASE + 63,
    GF_ERROR_SENSOR_NOT_AVAILABLE,  // = GF_ERROR_BASE + 64,

    // sensor test failed (check sensor otp info)
    GF_ERROR_SENSOR_TEST_FAILED,  // = GF_ERROR_BASE + 65,

    // Authenticate fail, then re-sampling image and re-authenticate.
    GF_ERROR_MATCH_FAIL_AND_RETRY,  // = GF_ERROR_BASE + 66,

    GF_ERROR_FINGER_NOT_LEAVE,  // = GF_ERROR_BASE + 67,  // Finger is not leave
    GF_ERROR_GET_TEMPERATURE_FAILED,  // = GF_ERROR_BASE + 68,
    GF_ERROR_GET_OTP_INFO_FAILED,  // = GF_ERROR_BASE + 69,
    GF_ERROR_TEST_RESET_PIN,  // = GF_ERROR_BASE + 70,
    GF_ERROR_TEST_INTERRUPT_PIN,  // = GF_ERROR_BASE + 71,
    GF_ERROR_UNKNOWN_CMD,  // = GF_ERROR_BASE + 72,

    // test spi transfer
    GF_ERROR_TEST_SPI_TRANSFER_TIMEOUT,  // = GF_ERROR_BASE + 73,

    // fido error code
    GF_ERROR_ENCODE_TLV,  // = GF_ERROR_BASE + 74,
    GF_ERROR_INVALID_FP_ID,  // = GF_ERROR_BASE + 75,

    // native service errors
    GF_ERROR_NATIVE_SERVICE_BASE,  // = GF_ERROR_BASE + 76,
    GF_ERROR_NATIVE_SERVICE_GETSERVICE,  // = GF_ERROR_BASE + 77,
    GF_ERROR_NATIVE_SERVICE_INIT_HAL,  // = GF_ERROR_BASE + 78,

    GF_ERROR_MKDIR_FAILED,  // = GF_ERROR_BASE + 79,
    GF_ERROR_FILE_OPEN_FAILED,  // = GF_ERROR_BASE + 80,
    GF_ERROR_FILE_NOT_EXIST,  // = GF_ERROR_BASE + 81,

    GF_ERROR_FILE_READ_FAILED,  // = GF_ERROR_BASE + 82,
    GF_ERROR_FILE_WRITE_FAILED,  // = GF_ERROR_BASE + 83,
    GF_ERROR_FILE_DELETE_FAILED,  // = GF_ERROR_BASE + 84,

    // rawdata saturated error
    GF_ERROR_TOO_MUCH_UNDER_SATURATED_PIXELS,  // = GF_ERROR_BASE + 85,
    GF_ERROR_TOO_MUCH_OVER_SATURATED_PIXELS,  // = GF_ERROR_BASE + 86,

    GF_ERROR_SENSOR_HAS_CHANGED,  // = GF_ERROR_BASE + 87,

    GF_ERROR_OPEN_SESSION_FAILED,  // = GF_ERROR_BASE + 88,

    GF_ERROR_FACTORY_TEST_FAILED,  // = GF_ERROR_BASE + 89,

    GF_ERROR_NO_GROUP_ID,  // = GF_ERROR_BASE + 90,

    GF_ERROR_UNKNOWN_TEST_TOKEN,  // = GF_ERROR_BASE + 91,

    GF_FINGER_FEATURE_STUDY_FAILED,  // = GF_ERROR_BASE + 92,

    GF_ERROR_INVALID_OTP_VERSION,  // = GF_ERROR_BASE + 93,

    GF_ERROR_CALIBRATION_NOT_READY,  // = GF_ERROR_BASE + 94,

    GF_ERROR_ALGO_INVALID_DATA,  // = GF_ERROR_BASE + 95,
    GF_ERROR_TOO_FAST,  // = GF_ERROR_BASE + 96,
    GF_ERROR_TEST_NOT_SUPPORTED,  // = GF_ERROR_BASE + 97,
    GF_ERROR_NO_NEED_UPDATE_BASE,  // = GF_ERROR_BASE + 98,
    GF_ERROR_OTP_CHECK_FAIL,  // = GF_ERROR_BASE+99,

    GF_ERROR_INIT_ALGO_REGISTER_INFO,  // = GF_ERROR_BASE + 100,
    GF_ERROR_DYNAMIC_ENROLL_INVALID_PRESS_TOO_MUCH,  // = GF_ERROR_BASE + 101,
    GF_ERROR_DYNAMIC_ERNOLL_INCOMPLETE_TEMPLATE,  // = GF_ERROR_BASE + 102,

    GF_ERROR_ALGO_DIRTY_FINGER,  // GF_ERROR_BASE + 103,

    GF_ERROR_PREPROCESS_FAIL_AND_RETRY,  // = GF_ERROR_BASE + 104,
    GF_ERROR_CRC_CHECK_FAILED_AND_RETRY,  // = GF_ERROR_BASE + 105,

    GF_ERROR_ALGO_COVER_BROKEN,  // = GF_ERROR_BASE + 106,
    GF_ERROR_SENSOR_ID_NOT_CHANGED,  // = GF_ERROR_BASE + 107,
    GF_ERROR_FARGO_CHIP_ID_NOT_CORRECT,  // = GF_ERROR_BASE + 108,
    GF_ERROR_CREATE_FINGER_TEMPLATE,  // = GF_ERROR_BASE + 109,
    GF_ERROR_DUMP_CONFIG_NOT_CORRECT,  // = GF_ERROR_BASE + 110,
    GF_ERROR_INVALID_STATE,  // = GF_ERROR_BASE + 111,
    GF_ERROR_FAILED_AND_RETRY,  // = GF_ERROR_BASE + 112,
    GF_ERROR_MT_INFO_CHECK_FAIL,  // = GF_ERROR_BASE+113,
    GF_ERROR_TEST_RESET_INT_PIN_MCU,  // GF_ERROR_BASE + 114,
    GF_ERROR_TEST_RESET_INT_PIN_SENSOR,  // GF_ERROR_BASE + 115,
    GF_ERROR_TEST_RESET_INT_PIN_PMIC,  // GF_ERROR_BASE + 116,
    GF_ERROR_TEST_MT,  // GF_ERROR_BASE + 117,
    GF_ERROR_TEST_SPMT,  // GF_ERROR_BASE + 118,
    GF_ERROR_TEST_OTP,  // GF_ERROR_BASE + 119,
    GF_ERROR_CHIP_IS_NOT_READY,  // GF_ERROR_BASE + 120,
    GF_ERROR_FACTORY_FOV_INVALID,  // GF_ERROR_BASE + 121,
    GF_ERROR_FACTORY_BADPOINT_INVALID,  // GF_ERROR_BASE + 122,
    GF_ERROR_FACTORY_SCALE_INVALID,  // GF_ERROR_BASE + 123,
    GF_ERROR_FACTORY_TNOISE_INVALID,  // GF_ERROR_BASE + 124,
    GF_ERROR_FACTORY_SNOISE_INVALID,  // GF_ERROR_BASE + 125,
    GF_ERROR_FACTORY_FLESH_TOUCHDIFF_INVALID,  // GF_ERROR_BASE + 126,
    GF_ERROR_FACTORY_LIGHT_LEAK_RATIO_INVALID,  // GF_ERROR_BASE + 127
    GF_ERROR_FACTORY_RELATIVEILLUMINANCE_INVALID,  // GF_ERROR_BASE + 128,
    GF_ERROR_FACTORY_CROP_INVALID,  // GF_ERROR_BASE + 129,
    GF_ERROR_FACTORY_SSNR_INVALID,  // GF_ERROR_BASE + 130,
    GF_ERROR_FACTORY_SHAPENESS_INVALID,  // GF_ERROR_BASE + 131,
    GF_ERROR_FACTORY_CONSTRAST_INVALID,  // GF_ERROR_BASE + 132,
    GF_ERROR_FACTORY_RAWDATA_INVALID,  // GF_ERROR_BASE + 133,
    GF_ERROR_HOLD_MCU_FAILED,  // GF_ERROR_BASE + 134,
    GF_ERROR_CAPTURE_IMAGE_FAILED,  // GF_ERROR_BASE + 135,
    GF_ERROR_NO_NEED_FORCE_STUDY,  // GF_ERROR_BASE + 136,
    GF_ERROR_NOT_LIVE_FINGER,  // GF_ERROR_BASE + 137,
    GF_ERROR_RESIDUAL_FINGER,  // GF_ERROR_BASE + 138,
    GF_ERROR_FACTORY_SCREEN_STRUCT_INVALID,  // GF_ERROR_BASE + 139,
    GF_ERROR_ALGO_INIT_FAILED,  // GF_ERROR_BASE + 140,
    GF_ERROR_NOT_MATCH_NOT_LIVE_FINGER,  // GF_ERROR_BASE + 141,
    GF_ERROR_ENROLL_AUTH_TOKEN_TIME_OUT,  // GF_ERROR_BASE + 142,
    GF_ERROR_UI_READY_TIMEOUT,  // GF_ERROR_BASE + 143,
    GF_ERROR_FACTORY_TILT_LEVEL_INVALID,  // GF_ERROR_BASE + 144,
    GF_ERROR_ALG_ANTIPEEPING_FINGER,
    GF_ERROR_ALG_SCREEN_STRUCT_IMG,
    GF_ERROR_ACQUIRED_IMAGER_DRY,
    GF_ERROR_ACQUIRED_IMAGER_WET,
    GF_ERROR_FACTORY_CAHRT_DIRECTION_INVALID,
    GF_ERROR_GPIO_FAILED,
    GF_ERROR_DSP_NOT_AVAILABLE,
    GF_ERROR_DSP_WAIT_TIMEOUT,
    GF_ERROR_DSP_GET_FEATURE_FAIL,
    GF_ERROR_UI_DISAPPEAR,
    GF_ERROR_FARR_MOCK_DISABLE,
    GF_ERROR_ACQUIRED_NOT_LIVE_FINGER,
    GF_ERROR_RPMB_GENERAL_ERROR,
    GF_ERROR_RPMB_WRITE_ERROR,
    GF_ERROR_RPMB_READ_ERROR,
    GF_ERROR_CHECK_PERFORMANCE_TESTING_RESULT_NOT_PASS,
    GF_ERROR_ALG_LOGO_DETECTION_FAILED,
    GF_ERROR_BRIGHTNESS_CHANGE_FAIL,
    GF_ERROR_BRIGHTNESS_NOT_STABILITY,
    GF_ERROR_CHART_DIRECTION_INCORRECT,
    GF_ERROR_TEST_SMT,
    GF_ERROR_ANOMALY_FINGER,
    GF_ERROR_NEED_CANCLE_ENROLL,

    GF_ERROR_SPI_TEST = 1500,
    GF_ERROR_RST_INT_TEST,  // GF_ERROR_SPI_TEST + 1,
    GF_ERROR_OTP_FLASH_TEST,  // GF_ERROR_SPI_TEST + 2,
    GF_ERROR_GET_CALIBRATION,  // GF_ERROR_SPI_TEST + 3,
    GF_ERROR_LOC_CIRCLE_TEST,  // GF_ERROR_SPI_TEST + 4,
    GF_ERROR_BAD_POINT_CLUSTER,  // GF_ERROR_SPI_TEST + 5,
    GF_ERROR_SNOISE,  // GF_ERROR_SPI_TEST + 6,
    GF_ERROR_TNOISE,  // GF_ERROR_SPI_TEST + 7,
    GF_ERROR_SIGNAL,  // GF_ERROR_SPI_TEST + 8,
    GF_ERROR_FLATSNOISE,  // GF_ERROR_SPI_TEST + 9,
    GF_ERROR_SSNR,  // GF_ERROR_SPI_TEST + 10,
    GF_ERROR_TSNR,  // GF_ERROR_SPI_TEST + 11,
    GF_ERROR_SHARPNESS,  // GF_ERROR_SPI_TEST + 12,
    GF_ERROR_HIGH_LIGHT,  // GF_ERROR_SPI_TEST + 13,
    GF_ERROR_SWITCH_BRIGHTNESS,  // GF_ERROR_SPI_TEST + 14,
    GF_ERROR_BRIGHTNESS_INSTABILITY,  // GF_ERROR_SPI_TEST + 15,
    GF_ERROR_PRESS_INCOMPLETE,  // GF_ERROR_SPI_TEST + 16,
    GF_ERROR_CHART_DIRECTION,  // GF_ERROR_SPI_TEST + 17,
    GF_ERROR_BLACK_RUBBER_LEAKAGE,  // GF_ERROR_SPI_TEST + 18,
    GF_ERROR_CALI_TEST_STAGE,  // GF_ERROR_SPI_TEST + 19,
    GF_ERROR_CALI_INFO_HEADER_CRC,  // GF_ERROR_SPI_TEST + 20,
    GF_ERROR_CALI_INFO_CRC,  // GF_ERROR_SPI_TEST + 21,
    GF_ERROR_HAF_BAD_POINT_CLUSTER,  // GF_ERROR_SPI_TEST + 22,
    GF_ERROR_DARK_PIXEL_PARAM,  // GF_ERROR_SPI_TEST + 23,
    GF_ERROR_SCREEN_PARAM,  // GF_ERROR_SPI_TEST + 24,
    GF_ERROR_CALCULATE_PGA_GAIN,  // GF_ERROR_SPI_TEST + 25,
    GF_ERROR_MORPHOTYPE_TEST,   // GF_ERROR_SPI_TEST + 26
    GF_ERROR_PRODUCT_ALGO_INTERFACE,   // GF_ERROR_SPI_TEST + 27
    GF_ERROR_CHIP_TYPE_INCORRECT,   // GF_ERROR_SPI_TEST + 28
    GF_ERROR_TEMPERATURE_ADC_BASE,   // GF_ERROR_SPI_TEST + 29
    GF_ERROR_DIAMOND_K,   // GF_ERROR_SPI_TEST + 30
    GF_ERROR_POLAR_DEGREE,   // GF_ERROR_SPI_TEST + 31
    GF_ERROR_CHART_GHOST_SHADOW,   // GF_ERROR_SPI_TEST + 32
    GF_ERROR_CHART_DIRTY,   // GF_ERROR_SPI_TEST + 33
    GF_ERROR_ANTIFAKE_OFFSET,   // GF_ERROR_SPI_TEST + 34

    GF_ERROR_SZ_FT_BASE = 2000,
    GF_SZ_FT_PASS = GF_ERROR_SZ_FT_BASE + 0x00,
    GF_SZ_FT_ERROR_INIT_PARAM = GF_ERROR_SZ_FT_BASE + 0x13,
    GF_SZ_FT_ERROR_BAD_PIXEL_OVERPROOF = GF_ERROR_SZ_FT_BASE + 0x14,
    GF_SZ_FT_ERROR_ANC_PREPROCESS = GF_ERROR_SZ_FT_BASE + 0x15,
    GF_SZ_FT_ERROR_RAWDATA_INVALID = GF_ERROR_SZ_FT_BASE + 0x16,
    GF_SZ_FT_ERROR_GET_IMAGE_MASK_FAIL = GF_ERROR_SZ_FT_BASE + 0x17,
    GF_SZ_FT_ERROR_COMM_FAIL = GF_ERROR_SZ_FT_BASE + 0x18,
    GF_SZ_FT_ERROR_READ_RAWDATA_TIMEOUT = GF_ERROR_SZ_FT_BASE + 0x19,
    GF_SZ_FT_ERROR_NOISE_TEST_FAIL = GF_ERROR_SZ_FT_BASE + 0x1A,
    GF_SZ_FT_ERROR_Q_VALUR_ABNORMAL = GF_ERROR_SZ_FT_BASE + 0x1B,
    GF_SZ_FT_ERROR_CROP_PEREMETER_INVALID = GF_ERROR_SZ_FT_BASE + 0x1C,
    GF_SZ_FT_ERROR_SCREEN_STRUCT_INVALID = GF_ERROR_SZ_FT_BASE + 0x1D,
    GF_SZ_FT_ERROR_CHART_DIRECTION_INVALID = GF_ERROR_SZ_FT_BASE + 0x1E,
    GF_SZ_FT_ERROR_CALCULATE_KB_FAIL = GF_ERROR_SZ_FT_BASE + 0x21,
    GF_SZ_FT_ERROR_GET_TNOISE_FAIL = GF_ERROR_SZ_FT_BASE + 0x22,
    GF_SZ_FT_ERROR_GET_SNOISE_FAIL = GF_ERROR_SZ_FT_BASE + 0x23,
    GF_SZ_FT_ERROR_GET_PREPRESS_PARAM_FAIL = GF_ERROR_SZ_FT_BASE + 0x24,
    GF_SZ_FT_ERROR_GET_RAWDATA_FAIL = GF_ERROR_SZ_FT_BASE + 0x26,
    GF_SZ_FT_ERROR_SHARPNESS_ABNORMAL = GF_ERROR_SZ_FT_BASE + 0x27,
    GF_SZ_FT_ERROR_SINGNAL_TEST_FAIL = GF_ERROR_SZ_FT_BASE + 0x28,
    GF_SZ_FT_ERROR_SSNR_TEST_FAIL = GF_ERROR_SZ_FT_BASE + 0x29,
    GF_SZ_FT_ERROR_KB_CALIBRATION_FAIL = GF_ERROR_SZ_FT_BASE + 0x2D,
    GF_SZ_FT_ERROR_READ_FLASH_FAIL = GF_ERROR_SZ_FT_BASE + 0x2E,
    GF_SZ_FT_ERROR_WRITE_FLASH_FAIL = GF_ERROR_SZ_FT_BASE + 0x2F,
    GF_SZ_FT_ERROR_CHECK_MT_FAIL = GF_ERROR_SZ_FT_BASE + 0x30,
    GF_SZ_FT_ERROR_WRITE_RESUTL_TO_FLASH_FAIL = GF_ERROR_SZ_FT_BASE + 0x31,
    GF_SZ_FT_ERROR_CHIP_ID_CHECK_FAIL = GF_ERROR_SZ_FT_BASE + 0x33,
    GF_SZ_FT_ERROR_FOV_TEST_FAIL = GF_ERROR_SZ_FT_BASE + 0x34,
    GF_SZ_FT_ERROR_SCALE_ABNORMAL = GF_ERROR_SZ_FT_BASE + 0x35,
    GF_SZ_FT_ERROR_ILLUMINANCE_ABNORMAL = GF_ERROR_SZ_FT_BASE + 0x36,
    GF_SZ_FT_ERROR_TOUCH_DIFF_ABNORMAL = GF_ERROR_SZ_FT_BASE + 0x37,
    GF_SZ_FT_ERROR_CONTRAST_ABNORMAL = GF_ERROR_SZ_FT_BASE + 0x38,
    GF_SZ_FT_ERROR_LDC_TEST_ABNORMAL = GF_ERROR_SZ_FT_BASE + 0x39,
    GF_SZ_FT_ERROR_SELF_EXPOSURE_ABNORMAL = GF_ERROR_SZ_FT_BASE + 0x3A,
    GF_SZ_FT_ERROR_VENDOR_ID_ERROR = GF_ERROR_SZ_FT_BASE + 0x3B,
    GF_SZ_FT_ERROR_LEAK_LIGHT_ABNOEMAL = GF_ERROR_SZ_FT_BASE + 0x3C,
    GF_SZ_FT_ERROR_LOG_IS_OPENED = GF_ERROR_SZ_FT_BASE + 0x5D,
    GF_SZ_FT_ERROR_NOT_SUPPORT_TEST = GF_ERROR_SZ_FT_BASE + 0x5E,
    GF_SZ_FT_ERROR_BAD_PIXEL_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x70,
    GF_SZ_FT_ERROR_CHECK_BAD_PIXEL_FAIL = GF_ERROR_SZ_FT_BASE + 0x71,
    GF_SZ_FT_ERROR_ANC_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x72,
    GF_SZ_FT_ERROR_GET_FOV_FAIL = GF_ERROR_SZ_FT_BASE + 0x73,
    GF_SZ_FT_ERROR_SCREEN_STRUCT_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x74,
    GF_SZ_FT_ERROR_GET_SCREEN_STRUCT_RATIO_FAIL = GF_ERROR_SZ_FT_BASE + 0x75,
    GF_SZ_FT_ERROR_CALCULATE_KB_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x76,
    GF_SZ_FT_ERROR_GET_SCALE_RATIO_FAIL = GF_ERROR_SZ_FT_BASE + 0x77,
    GF_SZ_FT_ERROR_QUALITY_CONTROL_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x78,
    GF_SZ_FT_ERROR_SCALE_RATIO_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x79,
    GF_SZ_FT_ERROR_TNOISE_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x7A,
    GF_SZ_FT_ERROR_TNOISE_OVERPROOF = GF_ERROR_SZ_FT_BASE + 0x7B,
    GF_SZ_FT_ERROR_SNOISE_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x7C,
    GF_SZ_FT_ERROR_SNOISE_OVERPROOF = GF_ERROR_SZ_FT_BASE + 0x7D,
    GF_SZ_FT_ERROR_TOUCH_DIFF_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x7E,
    GF_SZ_FT_ERROR_GET_TOUCH_DIFF_FAIL = GF_ERROR_SZ_FT_BASE + 0x7F,
    GF_SZ_FT_ERROR_LEAK_LIGHT_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x80,
    GF_SZ_FT_ERROR_GET_LEAK_LIGHT_FAIL = GF_ERROR_SZ_FT_BASE + 0x81,
    GF_SZ_FT_ERROR_ILLUMINANCE_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x82,
    GF_SZ_FT_ERROR_GET_ILLUMINANCE_FAIL = GF_ERROR_SZ_FT_BASE + 0x83,
    GF_SZ_FT_ERROR_SSNR_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x84,
    GF_SZ_FT_ERROR_GET_SSNR_PTOP_FAIL = GF_ERROR_SZ_FT_BASE + 0x85,
    GF_SZ_FT_ERROR_CHART_DIRECTION_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x86,
    GF_SZ_FT_ERROR_SHARPNESS_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x87,
    GF_SZ_FT_ERROR_GET_SHARPNESS_FAIL = GF_ERROR_SZ_FT_BASE + 0x88,
    GF_SZ_FT_ERROR_TC_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x89,
    GF_SZ_FT_ERROR_GET_TC_FAIL = GF_ERROR_SZ_FT_BASE + 0x8A,
    GF_SZ_FT_ERROR_SET_HBM_MODE_FAIL = GF_ERROR_SZ_FT_BASE + 0x8B,
    GF_SZ_FT_ERROR_CLOSE_HBM_MODE_FAIL = GF_ERROR_SZ_FT_BASE + 0x8C,
    GF_SZ_FT_ERROR_SET_HIGH_BRIGHTNESS_FAIL = GF_ERROR_SZ_FT_BASE + 0x8D,
    GF_SZ_FT_ERROR_SET_LOW_BRIGHTNESS_FAIL = GF_ERROR_SZ_FT_BASE + 0x8E,
    GF_SZ_FT_ERROR_LOCAL_AREA_SAMPLE_FAIL = GF_ERROR_SZ_FT_BASE + 0x8F,
    GF_SZ_FT_ERROR_CENTER_OFFSET_INIT_FAIL = GF_ERROR_SZ_FT_BASE+0x90,
    GF_SZ_FT_ERROR_CHECK_CENTER_OFFSET_FAIL = GF_ERROR_SZ_FT_BASE+0x91,
    GF_SZ_FT_ERROR_CHECK_LENS_MODULE_TILT = GF_ERROR_SZ_FT_BASE+0x92,
    GF_SZ_FT_ERROR_LENS_MODULE_TILT_OVERPROOF = GF_ERROR_SZ_FT_BASE+0x93,
    GF_SZ_FT_ERROR_CF_MASK_CHECK_FAIL = GF_ERROR_SZ_FT_BASE+0x94,
    GF_SZ_FT_ERROR_RAW_DATA = GF_ERROR_SZ_FT_BASE + 0x95,
    GF_SZ_FT_ERROR_MOIRE_PARAM_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x96,
    GF_SZ_FT_ERROR_CHECK_MOIRE_FAIL = GF_ERROR_SZ_FT_BASE + 0x97,
    GF_SZ_FT_ERROR_AUTO_EXPOSURE = GF_ERROR_SZ_FT_BASE + 0x98,
    GF_SZ_FT_ERROR_CHECK_FLESH_INIT_FAIL = GF_ERROR_SZ_FT_BASE + 0x99,
    GF_SZ_FT_ERROR_CHECK_FLESH_CHECK_FAIL = GF_ERROR_SZ_FT_BASE + 0x9A,
    GF_SZ_FT_ERROR_CHECK_FLESH_FAIL = GF_ERROR_SZ_FT_BASE + 0x9B,

    GF_SZ_FT_ERROR_APPLICATION_EXCEPTION = GF_ERROR_SZ_FT_BASE + 0xFF,

    GF_ERROR_MAX,
} gf_error_t;


typedef struct {
    gf_error_t err;
    const char *strerror;
} gf_strerror_t;

extern gf_strerror_t err_table[ ];

const char *gf_strerror(const gf_error_t err);

uint32_t gf_get_err_table_len(void);

#ifdef __cplusplus
}
#endif  // #ifdef __cplusplus

#endif      // _GF_ERROR_H_
