/************************************************************************************
 ** File: - to_string.cpp
 ** OPLUS_FEATURE_FINGERPRINT
 ** Copyright (C), 2021-2025, OPLUS Mobile Comm Corp., Ltd
 **
 ** Description:
 **      constant to string
 **
 ** Version: 1.0
 ** Date created: 11:00,11/01/2021
 ** Author: Zhi.Wang@BSP.Fingerprint.Basic
 ** TAG: BSP.Fingerprint.Basic
 ** --------------------------- Revision History: --------------------------------
 **  <author>           <data>            <desc>
 **  Zhi.Wang
 ************************************************************************************/

#include "gf_base_types.h"
#include "gf_fpcore_types.h"
#include "gf_algo_types.h"
#include "gf_delmar_product_test_types.h"
#include "gf_customized_types.h"
#include "gf_event.h"
#include "to_string.h"

#define KEY_END (-1)
#define VALUE_UNKNOWN "unknown"
#define ARR_SIZE(arr) (int)(sizeof(arr) / sizeof(arr[0]))

typedef struct kv {
    int key;
    const char* value;
} kv_t;

enum {
    MSG_DEVICE_INIT_END,
    MSG_HARDWARE_RESET,
    MSG_CAPTURE_IMAGE_END,
    MSG_ENROLL_REQUESTED,
    MSG_ENROLL_START,
    MSG_ENROLL_CONTINUE_CAPTURE,
    MSG_ENROLL_SAVE_TEMPLATE_END,
    MSG_ENROLL_END,
    MSG_AUTHENTICATE_REQUESTED,
    MSG_AUTHENTICATE_START,
    MSG_AUTHENTICATE_SAVE_TEMPLATE_END,
    MSG_AUTHENTICATE_ALGO_END,
    MSG_AUTHENTICATE_RETRYING,
    MSG_AUTHENTICATE_RETRY_END,
    MSG_AUTHENTICATE_END,
    MSG_WAIT_FOR_FINGER_INPUT,
    MSG_SCREEN_STATE,
    MSG_CANCELED,
    MSG_TEMPLATE_REMOVED,
    MSG_TA_DEAD,
    MSG_EVENT_QUEUED,
    MSG_PERSIST_DATA_CHANGE,
    MSG_MAX
};

enum {
    E_FP_EVENT_TEST = 0,
    E_FP_EVENT_IRQ = 1,
    E_FP_EVENT_SCR_OFF = 2,
    E_FP_EVENT_SCR_ON = 3,
    E_FP_EVENT_TP_TOUCHDOWN = 4,
    E_FP_EVENT_TP_TOUCHUP = 5,
    E_FP_EVENT_UI_READY = 6,
    E_FP_EVENT_UI_DISAPPEAR = 7,
    E_FP_EVENT_STOP_INTERRUPT= 8,
};

static kv_t s_module[] = {
    {GF_TARGET_BIO, "GF_TARGET_BIO"},
    {GF_TARGET_ALGO, "GF_TARGET_ALGO"},
    {GF_TARGET_SENSOR, "GF_TARGET_SENSOR"},
    {GF_TARGET_PRODUCT_TEST, "GF_TARGET_PRODUCT_TEST"},
    {GF_TARGET_DUMP, "GF_TARGET_DUMP"},
    {GF_TARGET_INJECTION, "GF_TARGET_INJECTION"},
    {GF_TARGET_AUTO_TEST, "GF_TARGET_AUTO_TEST"},
    {GF_TARGET_TRACE, "GF_TARGET_TRACE"},
    {GF_TARGET_FRR_FAR_TEST, "GF_TARGET_FRR_FAR_TEST"},
    {GF_TARGET_EXT_TOOLS, "GF_TARGET_EXT_TOOLS"},
    {GF_TARGET_DEBUG_TOOLS, "GF_TARGET_DEBUG_TOOLS"},
    {GF_TARGET_REPLAY_TEST, "GF_TARGET_REPLAY_TEST"},
    {GF_TARGET_DATA_SYNC, "GF_TARGET_DATA_SYNC"},
    {GF_TARGET_HEARTBEAT_RATE, "GF_TARGET_HEARTBEAT_RATE"},
    {GF_TARGET_MAX, "GF_TARGET_MAX"},
    {KEY_END, VALUE_UNKNOWN},
};

static kv_t s_bio_cmd[] = {
    {GF_CMD_AUTH_SETACTIVITY_GROUP, "GF_CMD_AUTH_SETACTIVITY_GROUP"},
    {GF_CMD_AUTH_AUTHENTICATE, "GF_CMD_AUTH_AUTHENTICATE"},
    {GF_CMD_AUTH_PRE_ENROLL, "GF_CMD_AUTH_PRE_ENROLL"},
    {GF_CMD_AUTH_ENROLL, "GF_CMD_AUTH_ENROLL"},
    {GF_CMD_AUTH_POST_ENROLL, "GF_CMD_AUTH_POST_ENROLL"},
    {GF_CMD_AUTH_GET_ID, "GF_CMD_AUTH_GET_ID"},
    {GF_CMD_AUTH_REMOVE, "GF_CMD_AUTH_REMOVE"},
    {GF_CMD_AUTH_ENUMERATE, "GF_CMD_AUTH_ENUMERATE"},
    {GF_CMD_AUTH_CANCEL, "GF_CMD_AUTH_CANCEL"},
    {GF_CMD_AUTH_SAVE_TEMPLATES, "GF_CMD_AUTH_SAVE_TEMPLATES"},
    {GF_CMD_AUTH_SET_HMAC_KEY, "GF_CMD_AUTH_SET_HMAC_KEY"},
    {GF_CMD_AUTH_SCREEN_STATE, "GF_CMD_AUTH_SCREEN_STATE"},
    {GF_CMD_AUTH_POST_AUTHENTICATE, "GF_CMD_AUTH_POST_AUTHENTICATE"},
    {GF_CMD_AUTH_INIT_FINISHED, "GF_CMD_AUTH_INIT_FINISHED"},
    {GF_CMD_AUTH_GENERATE_CHALLENGE, "GF_CMD_AUTH_GENERATE_CHALLENGE"},
    {GF_CMD_AUTH_REVOKE_CHALLENGE, "GF_CMD_AUTH_REVOKE_CHALLENGE"},
    {GF_CMD_AUTH_INVALIDATE_AUTH_ID, "GF_CMD_AUTH_INVALIDATE_AUTH_ID"},
    {GF_CMD_AUTH_AUTHENTICATE_END, "GF_CMD_AUTH_AUTHENTICATE_END"},
    {GF_CMD_AUTH_RESET_LOCKOUT, "GF_CMD_AUTH_RESET_LOCKOUT"},
    {GF_CMD_AUTH_MAX, "GF_CMD_AUTH_MAX"},
    {KEY_END, VALUE_UNKNOWN},
};

static kv_t s_algo_cmd[] = {
    {GF_CMD_ALGO_INIT, "GF_CMD_ALGO_INIT"},
    {GF_CMD_ALGO_ENROLL, "GF_CMD_ALGO_ENROLL"},
    {GF_CMD_ALGO_AUTHENTICATE, "GF_CMD_ALGO_AUTHENTICATE"},
    {GF_CMD_ALGO_POST_AUTHENTICATE, "GF_CMD_ALGO_POST_AUTHENTICATE"},
    {GF_CMD_ALGO_KPI, "GF_CMD_ALGO_KPI"},
    {GF_CMD_ALGO_ENROLL_GET_FEATURE_ONE, "GF_CMD_ALGO_ENROLL_GET_FEATURE_ONE"},
    {GF_CMD_ALGO_ENROLL_GET_FEATURE_THREE, "GF_CMD_ALGO_ENROLL_GET_FEATURE_THREE"},
    {GF_CMD_ALGO_ENROLL_GET_FEATURE_AFTER_THREE, "GF_CMD_ALGO_ENROLL_GET_FEATURE_AFTER_THREE"},
    {GF_CMD_ALGO_ENROLL_GET_FEATURE_FOUR, "GF_CMD_ALGO_ENROLL_GET_FEATURE_FOUR"},
    {GF_CMD_ALGO_ENROLL_GET_FEATURE_FIVE, "GF_CMD_ALGO_ENROLL_GET_FEATURE_FIVE"},
    {GF_CMD_ALGO_SKIN_DETECTION, "GF_CMD_ALGO_SKIN_DETECTION"},
    {GF_CMD_ALGO_GET_SKIN_THRESHOLD, "GF_CMD_ALGO_GET_SKIN_THRESHOLD"},
    {GF_DELMAR_CMD_UPDATE_SENSOR_IDS, "GF_DELMAR_CMD_UPDATE_SENSOR_IDS"},
    {GF_DELMAR_CMD_ALGO_AUTHENTICATE_END, "GF_DELMAR_CMD_ALGO_AUTHENTICATE_END"},
    {GF_DELMAR_CMD_ALGO_FINISH_ENROLL, "GF_DELMAR_CMD_ALGO_FINISH_ENROLL"},
    {GF_DELMAR_CMD_ALGO_AUTHENTICATE_HVX_SKIP_TEMPLATE, "GF_DELMAR_CMD_ALGO_AUTHENTICATE_HVX_SKIP_TEMPLATE"},
    {GF_DELMAR_CMD_ALGO_RESET_DATA, "GF_DELMAR_CMD_ALGO_RESET_DATA"},
    {GF_DELMAR_CMD_ALGO_FAST_GET_FEATURE_ONE, "GF_DELMAR_CMD_ALGO_FAST_GET_FEATURE_ONE"},
    {GF_DELMAR_CMD_ALGO_FAST_GET_FEATURE_THREE, "GF_DELMAR_CMD_ALGO_FAST_GET_FEATURE_THREE"},
    {GF_DELMAR_CMD_ALGO_ENROLL_END, "GF_DELMAR_CMD_ALGO_ENROLL_END"},
    {GF_CUSTOMIZED_CMD_GET_AUTH_DETAIL, "GF_CUSTOMIZED_CMD_GET_AUTH_DETAIL"},
    {GF_CUSTOMIZED_CMD_ALGO_BIG_DATA, "GF_CUSTOMIZED_CMD_ALGO_BIG_DATA"},
    {GF_CUSTOMIZED_CMD_GET_ALGOVERSION, "GF_CUSTOMIZED_CMD_GET_ALGOVERSION"},
    {KEY_END, VALUE_UNKNOWN},
};

static kv_t s_sensor_cmd[] = {
    {GF_CMD_SENSOR_PRE_DETECT, "GF_CMD_SENSOR_PRE_DETECT"},
    {GF_CMD_SENSOR_DETECT_SENSOR, "GF_CMD_SENSOR_DETECT_SENSOR"},
    {GF_CMD_SENSOR_INIT, "GF_CMD_SENSOR_INIT"},
    {GF_CMD_SENSOR_CAPTURE_IMG, "GF_CMD_SENSOR_CAPTURE_IMG"},
    {GF_CMD_SENSOR_DATA, "GF_CMD_AUTH_POST_ENROLL"},
    {GF_CMD_SENSOR_GET_IRQ_TYPE, "GF_CMD_SENSOR_GET_IRQ_TYPE"},
    {GF_CMD_SENSOR_SET_CONFIG, "GF_CMD_SENSOR_SET_CONFIG"},
    {GF_CMD_SENSOR_GET_LOGO_TIMES, "GF_CMD_SENSOR_GET_LOGO_TIMES"},
    {GF_CMD_SNESOR_SLEEP, "GF_CMD_SNESOR_SLEEP"},
    {GF_CMD_SNESOR_WAKEUP, "GF_CMD_SNESOR_WAKEUP"},
    {GF_CMD_DELMAR_SENSOR_BASE, "GF_CMD_DELMAR_SENSOR_BASE"},
    {GF_CMD_DELMAR_SENSOR_READ_IMAGE, "GF_CMD_DELMAR_SENSOR_READ_IMAGE"},
    {GF_CMD_DELMAR_SENSOR_NOTIFY_RESET, "GF_CMD_DELMAR_SENSOR_NOTIFY_RESET"},
    {GF_CMD_DELMAR_GET_CALI_LOAD_ERROR, "GF_CMD_DELMAR_GET_CALI_LOAD_ERROR"},
    {KEY_END, VALUE_UNKNOWN},
};

static kv_t s_product_cmd[] = {
    {GF_CMD_TEST_PERFORMANCE_TESTING, "GF_CMD_TEST_PERFORMANCE_TESTING"},
    {GF_CMD_TEST_LOCATION_CIRCLE_TESTING, "GF_CMD_TEST_LOCATION_CIRCLE_TESTING"},
    {GF_CMD_TEST_SPI, "GF_CMD_TEST_SPI"},
    {GF_CMD_TEST_RESET_INTERRUPT_PIN, "GF_CMD_TEST_RESET_INTERRUPT_PIN"},
    {GF_CMD_TEST_OTP_FLASH, "GF_CMD_TEST_OTP_FLASH"},
    {GF_CMD_TEST_GET_SENSOR_INFO, "GF_CMD_TEST_GET_SENSOR_INFO"},
    {GF_CMD_TEST_GET_OTP_INFO, "GF_CMD_TEST_GET_OTP_INFO"},
    {GF_CMD_TEST_GAIN_TARGET, "GF_CMD_TEST_GAIN_TARGET"},
    {GF_CMD_TEST_AGE_TEST, "GF_CMD_TEST_AGE_TEST"},
    {GF_CMD_TEST_IMAGE_QUALITY, "GF_CMD_TEST_IMAGE_QUALITY"},
    {GF_CMD_TEST_GET_VERSION, "GF_CMD_TEST_GET_VERSION"},
    {GF_CMD_TEST_CAPTURE_IMAGE, "GF_CMD_TEST_CAPTURE_IMAGE"},
    {GF_CMD_TEST_MORPHOTYPE, "GF_CMD_TEST_MORPHOTYPE"},
    {GF_CMD_SET_SAMPLING_CFG, "GF_CMD_SET_SAMPLING_CFG"},
    {KEY_END, VALUE_UNKNOWN},
};

static kv_t s_dump_cmd[] = {
    {GF_CMD_DUMP_DATA, "GF_CMD_DUMP_DATA"},
    {KEY_END, VALUE_UNKNOWN},
};

static kv_t s_product_op[] = {
    {OPERATION_STEP_COLLECT_NONE, "OPERATION_STEP_COLLECT_NONE"},
    {OPERATION_STEP_AUTO_EXPO_COLLECT, "OPERATION_STEP_AUTO_EXPO_COLLECT"},
    {OPERATION_STEP_CALCULATE_AUTO_EXPO, "OPERATION_STEP_CALCULATE_AUTO_EXPO"},
    {OPERATION_STEP_ADAPTED_EXPO_FOR_PWM_COLLECT, "OPERATION_STEP_ADAPTED_EXPO_FOR_PWM_COLLECT"},
    {OPERATION_STEP_CALCULATE_ADAPTE_EXPO_FOR_PWM, "OPERATION_STEP_CALCULATE_ADAPTE_EXPO_FOR_PWM"},
    {OPERATION_STEP_LOW_BR_BASEDATA_DARK_COLLECT, "OPERATION_STEP_LOW_BR_BASEDATA_DARK_COLLECT"},
    {OPERATION_STEP_LOW_BR_BASEDATA_MIN_DARK_COLLECT, "OPERATION_STEP_LOW_BR_BASEDATA_MIN_DARK_COLLECT"},
    {OPERATION_STEP_LOW_BR_BASEDATA_MED_DARK_COLLECT, "OPERATION_STEP_LOW_BR_BASEDATA_MED_DARK_COLLECT"},
    {OPERATION_STEP_LOW_BR_BASEDATA_MAX_DARK_COLLECT, "OPERATION_STEP_LOW_BR_BASEDATA_MAX_DARK_COLLECT"},
    {OPERATION_STEP_LOW_BR_BASEDATA_MIN_COLLECT, "OPERATION_STEP_LOW_BR_BASEDATA_MIN_COLLECT"},
    {OPERATION_STEP_LOW_BR_BASEDATA_MED_COLLECT, "OPERATION_STEP_LOW_BR_BASEDATA_MED_COLLECT"},
    {OPERATION_STEP_LOW_BR_BASEDATA_MAX_COLLECT, "OPERATION_STEP_LOW_BR_BASEDATA_MAX_COLLECT"},
    {OPERATION_STEP_LOW_BR_CIRCLEDATA_COLLECT, "OPERATION_STEP_LOW_BR_CIRCLEDATA_COLLECT"},
    {OPERATION_STEP_LOW_BR_CHARTDATA_COLLECT, "OPERATION_STEP_LOW_BR_CHARTDATA_COLLECT"},
    {OPERATION_STEP_LOW_BR_CIRCLE_CHARTDATA_COLLECT, "OPERATION_STEP_LOW_BR_CIRCLE_CHARTDATA_COLLECT"},
    {OPERATION_STEP_CIRCLE_CHARTDATA_COLLECT, "OPERATION_STEP_CIRCLE_CHARTDATA_COLLECT"},
    {OPERATION_STEP_BASEDATA_DARK_COLLECT, "OPERATION_STEP_BASEDATA_DARK_COLLECT"},
    {OPERATION_STEP_BASEDATA_MIN_DARK_COLLECT, "OPERATION_STEP_BASEDATA_MIN_DARK_COLLECT"},
    {OPERATION_STEP_BASEDATA_MID_DARK_COLLECT, "OPERATION_STEP_BASEDATA_MID_DARK_COLLECT"},
    {OPERATION_STEP_BASEDATA_MAX_DARK_COLLECT, "OPERATION_STEP_BASEDATA_MAX_DARK_COLLECT"},
    {OPERATION_STEP_BASEDATA_MIN_COLLECT, "OPERATION_STEP_BASEDATA_MIN_COLLECT"},
    {OPERATION_STEP_BASEDATA_MID_COLLECT, "OPERATION_STEP_BASEDATA_MID_COLLECT"},
    {OPERATION_STEP_BASEDATA_MAX_COLLECT, "OPERATION_STEP_BASEDATA_MAX_COLLECT"},
    {OPERATION_STEP_CIRCLEDATA_COLLECT, "OPERATION_STEP_CIRCLEDATA_COLLECT"},
    {OPERATION_STEP_CHARTDATA_COLLECT, "OPERATION_STEP_CHARTDATA_COLLECT"},
    {OPERATION_STEP_CALCULATE_RESULT, "OPERATION_STEP_CALCULATE_RESULT"},
    {OPERATION_STEP_GET_LOCATION_CIRCLE, "OPERATION_STEP_GET_LOCATION_CIRCLE"},
    {OPERATION_STEP_CALCULATE_SIMPLIFIED_PERFORMANCE_INDICATORS, "OPERATION_STEP_CALCULATE_SIMPLIFIED_PERFORMANCE_INDICATORS"},
    {OPERATION_STEP_CALCULATE_GAIN_COLLECT, "OPERATION_STEP_CALCULATE_GAIN_COLLECT"},
    {OPERATION_STEP_CALCULATE_GAIN, "OPERATION_STEP_CALCULATE_GAIN"},
    {OPERATION_STEP_CALCULATE_GAIN_ONE_COLLECT, "OPERATION_STEP_CALCULATE_GAIN_ONE_COLLECT"},
    {OPERATION_STEP_CALCULATE_GAIN_TWO, "OPERATION_STEP_CALCULATE_GAIN_TWO"},
    {OPERATION_STEP_CALCULATE_GAIN_TWO_COLLECT, "OPERATION_STEP_CALCULATE_GAIN_TWO_COLLECT"},
    {OPERATION_STEP_CALCULATE_GAIN_TWO_LIGHT_MEAN, "OPERATION_STEP_CALCULATE_GAIN_TWO_LIGHT_MEAN"},
    {OPERATION_STEP_FINISHED, "OPERATION_STEP_FINISHED"},
    {OPERATION_STEP_CALCULATE_MID_BRIGHTNESS_GAIN_COLLECT, "OPERATION_STEP_CALCULATE_MID_BRIGHTNESS_GAIN_COLLECT"},
    {OPERATION_STEP_CALCULATE_LOW_BRIGHTNESS_GAIN_COLLECT, "OPERATION_STEP_CALCULATE_LOW_BRIGHTNESS_GAIN_COLLECT"},
    {OPERATION_STEP_CALCULATE_LOW_BRIGHTNESS_GAIN, "OPERATION_STEP_CALCULATE_LOW_BRIGHTNESS_GAIN"},
    {OPERATION_STEP_MID_BRIGHTNESS_FRESH_COLLECT, "OPERATION_STEP_MID_BRIGHTNESS_FRESH_COLLECT"},
    {OPERATION_STEP_LOW_BRIGHTNESS_FRESH_COLLECT, "OPERATION_STEP_LOW_BRIGHTNESS_FRESH_COLLECT"},
    {OPERATION_STEP_CALCULATE_LOW_BRIGHTNESS_DIGIT_GAIN, "OPERATION_STEP_CALCULATE_LOW_BRIGHTNESS_DIGIT_GAIN"},
    {OPERATION_STEP_SAVE_KB_CALI, "OPERATION_STEP_SAVE_KB_CALI"},
    {OPERATION_STEP_SAVE_PGA_GAIN, "OPERATION_STEP_SAVE_PGA_GAIN"},
    {KEY_END, VALUE_UNKNOWN},
};

static kv_t s_netlink[] = {
    {E_FP_EVENT_TEST, "E_FP_EVENT_TEST"},
    {E_FP_EVENT_IRQ, "E_FP_EVENT_IRQ"},
    {E_FP_EVENT_SCR_OFF, "E_FP_EVENT_SCR_OFF"},
    {E_FP_EVENT_SCR_ON, "E_FP_EVENT_SCR_ON"},
    {E_FP_EVENT_TP_TOUCHDOWN, "E_FP_EVENT_TP_TOUCHDOWN"},
    {E_FP_EVENT_TP_TOUCHUP, "E_FP_EVENT_TP_TOUCHUP"},
    {E_FP_EVENT_UI_READY, "E_FP_EVENT_UI_READY"},
    {E_FP_EVENT_UI_DISAPPEAR, "E_FP_EVENT_UI_DISAPPEAR"},
    {E_FP_EVENT_STOP_INTERRUPT, "E_FP_EVENT_STOP_INTERRUPT"},
    {KEY_END, VALUE_UNKNOWN},
};

static kv_t s_event[] = {
    {EVENT_UNKNOWN, "EVENT_UNKNOWN"},
    {EVENT_SCREEN_ON, "EVENT_SCREEN_ON"},
    {EVENT_SCREEN_OFF, "EVENT_SCREEN_OFF"},
    {EVENT_IRQ, "EVENT_IRQ"},
    {EVENT_FINGER_DOWN, "EVENT_FINGER_DOWN"},
    {EVENT_FINGER_UP, "EVENT_FINGER_UP"},
    {EVENT_IRQ_RESET, "EVENT_IRQ_RESET"},
    {KEY_END, VALUE_UNKNOWN},
};

static kv_t s_msg[] = {
    {MSG_DEVICE_INIT_END, "MSG_DEVICE_INIT_END"},
    {MSG_HARDWARE_RESET, "MSG_HARDWARE_RESET"},
    {MSG_CAPTURE_IMAGE_END, "MSG_CAPTURE_IMAGE_END"},
    {MSG_ENROLL_REQUESTED, "MSG_ENROLL_REQUESTED"},
    {MSG_ENROLL_START, "MSG_ENROLL_START"},
    {MSG_ENROLL_CONTINUE_CAPTURE, "MSG_ENROLL_CONTINUE_CAPTURE"},
    {MSG_ENROLL_SAVE_TEMPLATE_END, "MSG_ENROLL_SAVE_TEMPLATE_END"},
    {MSG_ENROLL_END, "MSG_ENROLL_END"},
    {MSG_AUTHENTICATE_REQUESTED, "MSG_AUTHENTICATE_REQUESTED"},
    {MSG_AUTHENTICATE_START, "MSG_AUTHENTICATE_START"},
    {MSG_AUTHENTICATE_SAVE_TEMPLATE_END, "MSG_AUTHENTICATE_SAVE_TEMPLATE_END"},
    {MSG_AUTHENTICATE_ALGO_END, "MSG_AUTHENTICATE_ALGO_END"},
    {MSG_AUTHENTICATE_RETRYING, "MSG_AUTHENTICATE_RETRYING"},
    {MSG_AUTHENTICATE_RETRY_END, "MSG_AUTHENTICATE_RETRY_END"},
    {MSG_AUTHENTICATE_END, "MSG_AUTHENTICATE_END"},
    {MSG_WAIT_FOR_FINGER_INPUT, "MSG_WAIT_FOR_FINGER_INPUT"},
    {MSG_SCREEN_STATE, "MSG_SCREEN_STATE"},
    {MSG_CANCELED, "MSG_CANCELED"},
    {MSG_TEMPLATE_REMOVED, "MSG_TEMPLATE_REMOVED"},
    {MSG_TA_DEAD, "MSG_TA_DEAD"},
    {MSG_EVENT_QUEUED, "MSG_EVENT_QUEUED"},
    {MSG_PERSIST_DATA_CHANGE, "MSG_PERSIST_DATA_CHANGE"},
    {KEY_END, VALUE_UNKNOWN},
};

static const char* get_value(kv_t* kv, int kv_size, int key) {
    if (kv == 0) {
        return (const char*)VALUE_UNKNOWN;
    }

    for (int i = 0; i < kv_size; i++) {
        if ((kv[i].key == key) ||
            (kv[i].key == KEY_END)) {
            return kv[i].value;
        }
    }

    return (const char*)VALUE_UNKNOWN;
}

const char* module_to_str(int module_id) {
    return get_value(s_module, ARR_SIZE(s_module), module_id);
}

const char* cmd_to_str(int module_id, int cmd_id) {
    switch (module_id) {
        case GF_TARGET_BIO:
            return get_value(s_bio_cmd, ARR_SIZE(s_bio_cmd), cmd_id);
        case GF_TARGET_ALGO:
            return get_value(s_algo_cmd, ARR_SIZE(s_algo_cmd), cmd_id);
        case GF_TARGET_SENSOR:
            return get_value(s_sensor_cmd, ARR_SIZE(s_sensor_cmd), cmd_id);
        case GF_TARGET_PRODUCT_TEST:
            return get_value(s_product_cmd, ARR_SIZE(s_product_cmd), cmd_id);
        case GF_TARGET_DUMP:
            return get_value(s_dump_cmd, ARR_SIZE(s_dump_cmd), cmd_id);
        default:
            return (const char*)VALUE_UNKNOWN;
    }
}

const char* cali_op_to_str(int cali_op_id) {
    return get_value(s_product_op, ARR_SIZE(s_product_op), cali_op_id);
}

const char* netlink_to_str(int event_id) {
    return get_value(s_netlink, ARR_SIZE(s_netlink), event_id);
}

const char* event_to_str(int event_id) {
    return get_value(s_event, ARR_SIZE(s_event), event_id);
}

const char* msg_to_str(int msg_id) {
    return get_value(s_msg, ARR_SIZE(s_msg), msg_id);
}
