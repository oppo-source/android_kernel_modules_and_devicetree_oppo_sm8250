#ifndef __FP_DEFINITION_H__
#define __FP_DEFINITION_H__

typedef enum {
    FP_LIB_OK,
    FP_LIB_WAIT_EVENT_FINGER_PRESENT,
    FP_LIB_CAPTURE_DONE,
    FP_LIB_ENABLE_EVENT_FINGER_PRESENT,
    FP_LIB_WAIT_TIME,
    FP_LIB_FINGER_PRESENT,
    FP_LIB_FINGER_LOST,
    FP_LIB_ERROR_TOO_FAST,
    FP_LIB_ERROR_TOO_SLOW,
    FP_LIB_ERROR_GENERAL,
    FP_LIB_ERROR_SENSOR,
    FP_LIB_ERROR_MEMORY,
    FP_LIB_ERROR_PARAMETER,
    FP_LIB_FAIL_LOW_QUALITY,
    FP_LIB_FAIL_IDENTIFY_START,
    FP_LIB_FAIL_IDENTIFY_IMAGE,
    FP_LIB_ERROR_INVALID_FINGERID,

    FP_TA_ERROR_CODE_BASE = 0xFFFF6000,
    FP_TA_ERROR_TA_NOT_INIT,
    FP_TA_ERROR_STATE,
    FP_TA_ERROR_LIB_INIT_FAIL,
    FP_TA_ERROR_INIT_ALG_PPLIB_FAIL,
    FP_TA_ERROR_EROLL_EXCEED_MAX_FINGERPIRNTS,
    FP_TA_ERROR_EROLL_NOT_COMPLETED,
    FP_TA_ERROR_EROLL_GET_TEMPLATE_FAIL,
    FP_TA_ERROR_EROLL_PACK_TEMPLATE_FAIL,
    FP_TA_ERROR_EROLL_START_FAIL,
    FP_TA_ERROR_EROLL_ADD_IMAGE,

    FP_TA_DB_CODE_BASE = FP_TA_ERROR_CODE_BASE | 0x1000,
    FP_TA_ERROR_DB_FS_INIT_FAIL,
    FP_TA_ERROR_CREAT_GLOBAL_DB_FAIL,
    FP_TA_ERROR_CREAT_USER_DB_FAIL,
    FP_TA_ERROR_DB_SIZE_OVERFLOW,
    FP_TA_ERROR_DB_GET_FP_ID_ERROR,
    FP_TA_ERROR_DB_GET_FPSET_ID_ERROR,
    FP_TA_ERROR_DB_GET_SECURE_USER_ID_ERROR,
    FP_LIB_OVER_SPEC,
    FP_LIB_FAIL_FINGER_RESIDUAL,
} fp_lib_return_t;

typedef enum {
    FP_IMAGE_SUCCESS,
    // h define start
    FP_IMAGE_HELP_SAME_AREA,
    FP_IMAGE_HELP_TOO_WET,
    FP_IMAGE_HELP_ALREADY_EXIST,
    // h define end
    FP_IMAGE_TOO_MANY_ATTEMPTS,
    FP_IMAGE_TOO_MANY_FAILED_ATTEMPTS,
    FP_IMAGE_FAIL_NONE,
    FP_IMAGE_FAIL_LOW_QUALITY,
    FP_IMAGE_FAIL_LOW_COVERAGE,
    FP_IMAGE_FAIL_LOW_QUALITY_AND_LOW_COVERAGE,
    FP_IMAGE_FINGER_OFF_0,  // it means detected finger off before get image
    FP_IMAGE_FINGER_OFF_1,  // it means detected finger off after get image
    FP_IMAGE_TOO_FAST,
    FP_IMAGE_PERMISSION_DENIED,
    FP_IMAGE_FAIL_SPOOF_FINGER,
    FP_IMAGE_FAIL_LOW_QUALITY_DYNAMIC_REJECT_LEVEL,
    FP_IMAGE_FAIL_RESIDUAL,
    FP_IMAGE_FAIL_CANCEL,
    FP_IMAGE_SPI_FAIL,
    FP_IMAGE_BAD_IMAGE_FINGER_OFF_1,
    FP_IMAGE_PARTIAL_FINGER_OFF_1,
    FP_IMAGE_BAD_IMAGE,
    FP_IMAGE_PARTIAL,

} fp_lib_get_image_result_t;

typedef enum {
    FP_LIB_ENROLL_SUCCESS,
    // h define start
    FP_LIB_ENROLL_HELP_SAME_AREA,
    FP_LIB_ENROLL_HELP_TOO_WET,
    FP_LIB_ENROLL_HELP_ALREADY_EXIST,
    // h define end
    FP_LIB_ENROLL_TOO_MANY_ATTEMPTS,
    FP_LIB_ENROLL_TOO_MANY_FAILED_ATTEMPTS,
    FP_LIB_ENROLL_FAIL_NONE,
    FP_LIB_ENROLL_FAIL_LOW_QUALITY,
    FP_LIB_ENROLL_FAIL_LOW_COVERAGE,
    FP_LIB_ENROLL_FAIL_LOW_QUALITY_AND_LOW_COVERAGE,
    FP_LIB_ENROLL_TOO_FAST,

    FP_LIB_ENROLL_PERMISSION_DENIED,
    FP_LIB_ENROLL_FAIL_SPOOF_FINGER,
    FP_LIB_ENROLL_FAIL_LOW_QUALITY_DYNAMIC_REJECT_LEVEL,

    FP_LIB_ENROLL_HELP_SCRATCH_DETECTED,
} fp_lib_enroll_result_t;

typedef enum {
    FP_LIB_IDENTIFY_NO_MATCH,
    FP_LIB_IDENTIFY_MATCH,
    FP_LIB_IDENTIFY_MATCH_UPDATED_TEMPLATE,
    FP_LIB_IDENTIFY_RETRYSTOP,
    FP_LIB_IDENTIFY_NO_MATCH_PARTIAL,
    FP_LIB_IDENTIFY_NO_MATCH_BADIMAGE,
} fp_lib_identify_result_t;

typedef enum {
    FP_LIB_VERIFY_MATCHED = 0,
    FP_LIB_VERIFY_LOW_QTY,
    FP_LIB_VERIFY_LOW_COVERAGE,
    FP_LIB_VERIFY_RESIDUAL,
    FP_LIB_VERIFY_RETRYSTOP,
    FP_LIB_VERIFY_TOO_WET,
    FP_LIB_VERIFY_FAKE,
    FP_LIB_VERIFY_TOO_FAST,
    FP_LIB_VERIFY_FAIL
} fp_lib_verify_fail_reason_e;

typedef enum {
    FP_GET_IMAGE_NORMAL_FINGER_OFF = 0,
    FP_GET_IMAGE_AFTER_FINGER_OFF = 1, // means get image after finger leave
    FP_GET_IMAGE_BEFORE_FINGER_OFF = 2, // means get image before finger leave
} fp_verify_finger_leave;
#endif
